package com.smartscore.board.controller;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.smartscore.board.repository.Users;
import com.smartscore.board.repository.UserRepository;
import com.smartscore.board.repository.UserRepository2;

@RestController
//@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
@RequestMapping(path = "api/v2") // This means URL's start with /api (after Application path)
public class UserController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private UserRepository2 userRepository2;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

		Users n = new Users();
		n.setName(name);
		n.setEmail(email);
		userRepository2.save(n);
		return "Saved";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Users> getAllUsers() {
// This returns a JSON or XML with the users
		return userRepository2.findAll();
	}

	// Pageable 사용 예제
	@GetMapping("/all-users")
	public Page<Users> getAllUser(@PageableDefault(page = 0, size = 5, sort = "age", direction = Sort.Direction.ASC) Pageable pageable) {
//		 Pageable pageable = PageRequest.of(0, 2, Sort.by("title").descending());

	    return userRepository.findAll(pageable);
	}

	// PageRequest 사용 예제
//	@GetMapping("/find-by-name")
//	public Page<User> findByName(@RequestParam(required = false, defaultValue = "0") int page) {
//		PageRequest pageable = PageRequest.of(page, 10, Sort.by("name").descending());
//		return userRepository.findByNameContains("kim", pageable);
//	}

	private static final String template = "Hello, %s!";
	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/greeting")
	public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
	}
}
